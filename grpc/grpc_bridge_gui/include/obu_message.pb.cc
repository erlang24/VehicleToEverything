// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obu_message.proto

#include "obu_message.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace grpc {
namespace obu {
namespace msg {

inline constexpr TrafficLight::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : state_{static_cast< ::grpc::obu::msg::TrafficLight_TrafficLightState >(0)},
        remaining_time_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TrafficLight::TrafficLight(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrafficLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightDefaultTypeInternal() {}
  union {
    TrafficLight _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;

inline constexpr Time::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sec_{0},
        nanosec_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Time::Time(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeDefaultTypeInternal() {}
  union {
    Time _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeDefaultTypeInternal _Time_default_instance_;

inline constexpr ObuWarningInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : fcw_{false},
        icw_{false},
        bsw_{false},
        avw_{false},
        glosa_mps_{0},
        glosa_{false},
        evw_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ObuWarningInfo::ObuWarningInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ObuWarningInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObuWarningInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObuWarningInfoDefaultTypeInternal() {}
  union {
    ObuWarningInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObuWarningInfoDefaultTypeInternal _ObuWarningInfo_default_instance_;

inline constexpr Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        frame_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stamp_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Header::Header(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;

inline constexpr ObuTrafficLightInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        turn_left_{nullptr},
        straight_ahead_{nullptr},
        turn_right_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ObuTrafficLightInfo::ObuTrafficLightInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ObuTrafficLightInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObuTrafficLightInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObuTrafficLightInfoDefaultTypeInternal() {}
  union {
    ObuTrafficLightInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObuTrafficLightInfoDefaultTypeInternal _ObuTrafficLightInfo_default_instance_;

inline constexpr ObuBasicInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        header_{nullptr},
        latitude_{0},
        longitude_{0},
        altitude_{0},
        gnss_heading_{0},
        gnss_speed_{0},
        vehicle_speed_{0},
        pitch_rad_{0},
        roll_rad_{0},
        yaw_rad_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ObuBasicInfo::ObuBasicInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ObuBasicInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObuBasicInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObuBasicInfoDefaultTypeInternal() {}
  union {
    ObuBasicInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObuBasicInfoDefaultTypeInternal _ObuBasicInfo_default_instance_;
}  // namespace msg
}  // namespace obu
}  // namespace grpc
static ::_pb::Metadata file_level_metadata_obu_5fmessage_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_obu_5fmessage_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_obu_5fmessage_2eproto = nullptr;
const ::uint32_t TableStruct_obu_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Time, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Time, _impl_.sec_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Time, _impl_.nanosec_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Header, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Header, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Header, _impl_.frame_id_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Header, _impl_.stamp_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::Header, _impl_.status_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuWarningInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuWarningInfo, _impl_.fcw_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuWarningInfo, _impl_.icw_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuWarningInfo, _impl_.bsw_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuWarningInfo, _impl_.avw_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuWarningInfo, _impl_.glosa_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuWarningInfo, _impl_.glosa_mps_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuWarningInfo, _impl_.evw_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.latitude_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.longitude_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.altitude_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.gnss_heading_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.gnss_speed_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.vehicle_speed_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.pitch_rad_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.roll_rad_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuBasicInfo, _impl_.yaw_rad_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::TrafficLight, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::TrafficLight, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::TrafficLight, _impl_.remaining_time_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuTrafficLightInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuTrafficLightInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuTrafficLightInfo, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuTrafficLightInfo, _impl_.turn_left_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuTrafficLightInfo, _impl_.straight_ahead_),
    PROTOBUF_FIELD_OFFSET(::grpc::obu::msg::ObuTrafficLightInfo, _impl_.turn_right_),
    0,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::grpc::obu::msg::Time)},
        {10, 22, -1, sizeof(::grpc::obu::msg::Header)},
        {26, -1, -1, sizeof(::grpc::obu::msg::ObuWarningInfo)},
        {41, 59, -1, sizeof(::grpc::obu::msg::ObuBasicInfo)},
        {69, -1, -1, sizeof(::grpc::obu::msg::TrafficLight)},
        {79, 91, -1, sizeof(::grpc::obu::msg::ObuTrafficLightInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::grpc::obu::msg::_Time_default_instance_._instance,
    &::grpc::obu::msg::_Header_default_instance_._instance,
    &::grpc::obu::msg::_ObuWarningInfo_default_instance_._instance,
    &::grpc::obu::msg::_ObuBasicInfo_default_instance_._instance,
    &::grpc::obu::msg::_TrafficLight_default_instance_._instance,
    &::grpc::obu::msg::_ObuTrafficLightInfo_default_instance_._instance,
};
const char descriptor_table_protodef_obu_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021obu_message.proto\022\014grpc.obu.msg\"$\n\004Tim"
    "e\022\013\n\003sec\030\001 \001(\005\022\017\n\007nanosec\030\002 \001(\r\"[\n\006Heade"
    "r\022\014\n\004name\030\001 \001(\t\022\020\n\010frame_id\030\002 \001(\t\022!\n\005sta"
    "mp\030\003 \001(\0132\022.grpc.obu.msg.Time\022\016\n\006status\030\004"
    " \001(\t\"s\n\016ObuWarningInfo\022\013\n\003fcw\030\001 \001(\010\022\013\n\003i"
    "cw\030\002 \001(\010\022\013\n\003bsw\030\003 \001(\010\022\013\n\003avw\030\004 \001(\010\022\r\n\005gl"
    "osa\030\005 \001(\010\022\021\n\tglosa_mps\030\006 \001(\002\022\013\n\003evw\030\007 \001("
    "\010\"\342\001\n\014ObuBasicInfo\022$\n\006Header\030\002 \001(\0132\024.grp"
    "c.obu.msg.Header\022\020\n\010latitude\030\003 \001(\002\022\021\n\tlo"
    "ngitude\030\004 \001(\002\022\020\n\010altitude\030\005 \001(\002\022\024\n\014gnss_"
    "heading\030\006 \001(\002\022\022\n\ngnss_speed\030\007 \001(\002\022\025\n\rveh"
    "icle_speed\030\010 \001(\002\022\021\n\tpitch_rad\030\t \001(\002\022\020\n\010r"
    "oll_rad\030\n \001(\002\022\017\n\007yaw_rad\030\013 \001(\002\"\245\001\n\014Traff"
    "icLight\022;\n\005state\030\002 \001(\0162,.grpc.obu.msg.Tr"
    "afficLight.TrafficLightState\022\026\n\016remainin"
    "g_time\030\003 \001(\002\"@\n\021TrafficLightState\022\013\n\007UNK"
    "NOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t\n\005GREEN\020\003\"\316"
    "\001\n\023ObuTrafficLightInfo\022$\n\006Header\030\001 \001(\0132\024"
    ".grpc.obu.msg.Header\022-\n\tturn_left\030\002 \001(\0132"
    "\032.grpc.obu.msg.TrafficLight\0222\n\016straight_"
    "ahead\030\003 \001(\0132\032.grpc.obu.msg.TrafficLight\022"
    ".\n\nturn_right\030\004 \001(\0132\032.grpc.obu.msg.Traff"
    "icLightb\006proto3"
};
static ::absl::once_flag descriptor_table_obu_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_obu_5fmessage_2eproto = {
    false,
    false,
    895,
    descriptor_table_protodef_obu_5fmessage_2eproto,
    "obu_message.proto",
    &descriptor_table_obu_5fmessage_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_obu_5fmessage_2eproto::offsets,
    file_level_metadata_obu_5fmessage_2eproto,
    file_level_enum_descriptors_obu_5fmessage_2eproto,
    file_level_service_descriptors_obu_5fmessage_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_obu_5fmessage_2eproto_getter() {
  return &descriptor_table_obu_5fmessage_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_obu_5fmessage_2eproto(&descriptor_table_obu_5fmessage_2eproto);
namespace grpc {
namespace obu {
namespace msg {
const ::google::protobuf::EnumDescriptor* TrafficLight_TrafficLightState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_obu_5fmessage_2eproto);
  return file_level_enum_descriptors_obu_5fmessage_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TrafficLight_TrafficLightState_internal_data_[] = {
    262144u, 0u, };
bool TrafficLight_TrafficLightState_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrafficLight_TrafficLightState TrafficLight::UNKNOWN;
constexpr TrafficLight_TrafficLightState TrafficLight::RED;
constexpr TrafficLight_TrafficLightState TrafficLight::YELLOW;
constexpr TrafficLight_TrafficLightState TrafficLight::GREEN;
constexpr TrafficLight_TrafficLightState TrafficLight::TrafficLightState_MIN;
constexpr TrafficLight_TrafficLightState TrafficLight::TrafficLightState_MAX;
constexpr int TrafficLight::TrafficLightState_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Time::_Internal {
 public:
};

Time::Time(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.obu.msg.Time)
}
Time::Time(
    ::google::protobuf::Arena* arena, const Time& from)
    : Time(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Time::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Time::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sec_),
           0,
           offsetof(Impl_, nanosec_) -
               offsetof(Impl_, sec_) +
               sizeof(Impl_::nanosec_));
}
Time::~Time() {
  // @@protoc_insertion_point(destructor:grpc.obu.msg.Time)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Time::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.obu.msg.Time)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sec_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nanosec_) -
      reinterpret_cast<char*>(&_impl_.sec_)) + sizeof(_impl_.nanosec_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Time::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Time::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Time_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 nanosec = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Time, _impl_.nanosec_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Time, _impl_.nanosec_)}},
    // int32 sec = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Time, _impl_.sec_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Time, _impl_.sec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 sec = 1;
    {PROTOBUF_FIELD_OFFSET(Time, _impl_.sec_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint32 nanosec = 2;
    {PROTOBUF_FIELD_OFFSET(Time, _impl_.nanosec_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Time::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.obu.msg.Time)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 sec = 1;
  if (this->_internal_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_sec(), target);
  }

  // uint32 nanosec = 2;
  if (this->_internal_nanosec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_nanosec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.obu.msg.Time)
  return target;
}

::size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.obu.msg.Time)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sec = 1;
  if (this->_internal_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sec());
  }

  // uint32 nanosec = 2;
  if (this->_internal_nanosec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_nanosec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Time::_class_data_ = {
    Time::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Time::GetClassData() const {
  return &_class_data_;
}

void Time::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Time*>(&to_msg);
  auto& from = static_cast<const Time&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.obu.msg.Time)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sec() != 0) {
    _this->_internal_set_sec(from._internal_sec());
  }
  if (from._internal_nanosec() != 0) {
    _this->_internal_set_nanosec(from._internal_nanosec());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.obu.msg.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Time::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Time::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Time::InternalSwap(Time* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Time, _impl_.nanosec_)
      + sizeof(Time::_impl_.nanosec_)
      - PROTOBUF_FIELD_OFFSET(Time, _impl_.sec_)>(
          reinterpret_cast<char*>(&_impl_.sec_),
          reinterpret_cast<char*>(&other->_impl_.sec_));
}

::google::protobuf::Metadata Time::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obu_5fmessage_2eproto_getter, &descriptor_table_obu_5fmessage_2eproto_once,
      file_level_metadata_obu_5fmessage_2eproto[0]);
}
// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static const ::grpc::obu::msg::Time& stamp(const Header* msg);
  static void set_has_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::grpc::obu::msg::Time& Header::_Internal::stamp(const Header* msg) {
  return *msg->_impl_.stamp_;
}
Header::Header(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.obu.msg.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        frame_id_(arena, from.frame_id_),
        status_(arena, from.status_) {}

Header::Header(
    ::google::protobuf::Arena* arena,
    const Header& from)
    : ::google::protobuf::Message(arena) {
  Header* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.stamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::grpc::obu::msg::Time>(arena, *from._impl_.stamp_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:grpc.obu.msg.Header)
}
inline PROTOBUF_NDEBUG_INLINE Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        frame_id_(arena),
        status_(arena) {}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.stamp_ = {};
}
Header::~Header() {
  // @@protoc_insertion_point(destructor:grpc.obu.msg.Header)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.frame_id_.Destroy();
  _impl_.status_.Destroy();
  delete _impl_.stamp_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.obu.msg.Header)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.frame_id_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.stamp_ != nullptr);
    _impl_.stamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Header::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 46, 2> Header::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Header_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string status = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.status_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.name_)}},
    // string frame_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.frame_id_)}},
    // .grpc.obu.msg.Time stamp = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Header, _impl_.stamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .grpc.obu.msg.Time stamp = 3;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.stamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string status = 4;
    {PROTOBUF_FIELD_OFFSET(Header, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::grpc::obu::msg::Time>()},
  }}, {{
    "\23\4\10\0\6\0\0\0"
    "grpc.obu.msg.Header"
    "name"
    "frame_id"
    "status"
  }},
};

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.obu.msg.Header)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "grpc.obu.msg.Header.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string frame_id = 2;
  if (!this->_internal_frame_id().empty()) {
    const std::string& _s = this->_internal_frame_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "grpc.obu.msg.Header.frame_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .grpc.obu.msg.Time stamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::stamp(this),
        _Internal::stamp(this).GetCachedSize(), target, stream);
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "grpc.obu.msg.Header.status");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.obu.msg.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.obu.msg.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string frame_id = 2;
  if (!this->_internal_frame_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_frame_id());
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // .grpc.obu.msg.Time stamp = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Header::_class_data_ = {
    Header::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Header::GetClassData() const {
  return &_class_data_;
}

void Header::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.obu.msg.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_frame_id().empty()) {
    _this->_internal_set_frame_id(from._internal_frame_id());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_stamp()->::grpc::obu::msg::Time::MergeFrom(
        from._internal_stamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.obu.msg.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Header::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Header::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Header::InternalSwap(Header* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.frame_id_, &other->_impl_.frame_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  swap(_impl_.stamp_, other->_impl_.stamp_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obu_5fmessage_2eproto_getter, &descriptor_table_obu_5fmessage_2eproto_once,
      file_level_metadata_obu_5fmessage_2eproto[1]);
}
// ===================================================================

class ObuWarningInfo::_Internal {
 public:
};

ObuWarningInfo::ObuWarningInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.obu.msg.ObuWarningInfo)
}
ObuWarningInfo::ObuWarningInfo(
    ::google::protobuf::Arena* arena, const ObuWarningInfo& from)
    : ObuWarningInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ObuWarningInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ObuWarningInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, fcw_),
           0,
           offsetof(Impl_, evw_) -
               offsetof(Impl_, fcw_) +
               sizeof(Impl_::evw_));
}
ObuWarningInfo::~ObuWarningInfo() {
  // @@protoc_insertion_point(destructor:grpc.obu.msg.ObuWarningInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ObuWarningInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ObuWarningInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.obu.msg.ObuWarningInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fcw_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.evw_) -
      reinterpret_cast<char*>(&_impl_.fcw_)) + sizeof(_impl_.evw_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ObuWarningInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> ObuWarningInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ObuWarningInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool fcw = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ObuWarningInfo, _impl_.fcw_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.fcw_)}},
    // bool icw = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ObuWarningInfo, _impl_.icw_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.icw_)}},
    // bool bsw = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ObuWarningInfo, _impl_.bsw_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.bsw_)}},
    // bool avw = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ObuWarningInfo, _impl_.avw_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.avw_)}},
    // bool glosa = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ObuWarningInfo, _impl_.glosa_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.glosa_)}},
    // float glosa_mps = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.glosa_mps_)}},
    // bool evw = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ObuWarningInfo, _impl_.evw_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.evw_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool fcw = 1;
    {PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.fcw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool icw = 2;
    {PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.icw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool bsw = 3;
    {PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.bsw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool avw = 4;
    {PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.avw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool glosa = 5;
    {PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.glosa_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float glosa_mps = 6;
    {PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.glosa_mps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool evw = 7;
    {PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.evw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ObuWarningInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.obu.msg.ObuWarningInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool fcw = 1;
  if (this->_internal_fcw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_fcw(), target);
  }

  // bool icw = 2;
  if (this->_internal_icw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_icw(), target);
  }

  // bool bsw = 3;
  if (this->_internal_bsw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_bsw(), target);
  }

  // bool avw = 4;
  if (this->_internal_avw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_avw(), target);
  }

  // bool glosa = 5;
  if (this->_internal_glosa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_glosa(), target);
  }

  // float glosa_mps = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_glosa_mps = this->_internal_glosa_mps();
  ::uint32_t raw_glosa_mps;
  memcpy(&raw_glosa_mps, &tmp_glosa_mps, sizeof(tmp_glosa_mps));
  if (raw_glosa_mps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_glosa_mps(), target);
  }

  // bool evw = 7;
  if (this->_internal_evw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_evw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.obu.msg.ObuWarningInfo)
  return target;
}

::size_t ObuWarningInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.obu.msg.ObuWarningInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool fcw = 1;
  if (this->_internal_fcw() != 0) {
    total_size += 2;
  }

  // bool icw = 2;
  if (this->_internal_icw() != 0) {
    total_size += 2;
  }

  // bool bsw = 3;
  if (this->_internal_bsw() != 0) {
    total_size += 2;
  }

  // bool avw = 4;
  if (this->_internal_avw() != 0) {
    total_size += 2;
  }

  // float glosa_mps = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_glosa_mps = this->_internal_glosa_mps();
  ::uint32_t raw_glosa_mps;
  memcpy(&raw_glosa_mps, &tmp_glosa_mps, sizeof(tmp_glosa_mps));
  if (raw_glosa_mps != 0) {
    total_size += 5;
  }

  // bool glosa = 5;
  if (this->_internal_glosa() != 0) {
    total_size += 2;
  }

  // bool evw = 7;
  if (this->_internal_evw() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ObuWarningInfo::_class_data_ = {
    ObuWarningInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ObuWarningInfo::GetClassData() const {
  return &_class_data_;
}

void ObuWarningInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ObuWarningInfo*>(&to_msg);
  auto& from = static_cast<const ObuWarningInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.obu.msg.ObuWarningInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fcw() != 0) {
    _this->_internal_set_fcw(from._internal_fcw());
  }
  if (from._internal_icw() != 0) {
    _this->_internal_set_icw(from._internal_icw());
  }
  if (from._internal_bsw() != 0) {
    _this->_internal_set_bsw(from._internal_bsw());
  }
  if (from._internal_avw() != 0) {
    _this->_internal_set_avw(from._internal_avw());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_glosa_mps = from._internal_glosa_mps();
  ::uint32_t raw_glosa_mps;
  memcpy(&raw_glosa_mps, &tmp_glosa_mps, sizeof(tmp_glosa_mps));
  if (raw_glosa_mps != 0) {
    _this->_internal_set_glosa_mps(from._internal_glosa_mps());
  }
  if (from._internal_glosa() != 0) {
    _this->_internal_set_glosa(from._internal_glosa());
  }
  if (from._internal_evw() != 0) {
    _this->_internal_set_evw(from._internal_evw());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ObuWarningInfo::CopyFrom(const ObuWarningInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.obu.msg.ObuWarningInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ObuWarningInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ObuWarningInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ObuWarningInfo::InternalSwap(ObuWarningInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.evw_)
      + sizeof(ObuWarningInfo::_impl_.evw_)
      - PROTOBUF_FIELD_OFFSET(ObuWarningInfo, _impl_.fcw_)>(
          reinterpret_cast<char*>(&_impl_.fcw_),
          reinterpret_cast<char*>(&other->_impl_.fcw_));
}

::google::protobuf::Metadata ObuWarningInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obu_5fmessage_2eproto_getter, &descriptor_table_obu_5fmessage_2eproto_once,
      file_level_metadata_obu_5fmessage_2eproto[2]);
}
// ===================================================================

class ObuBasicInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObuBasicInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_._has_bits_);
  static const ::grpc::obu::msg::Header& header(const ObuBasicInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::grpc::obu::msg::Header& ObuBasicInfo::_Internal::header(const ObuBasicInfo* msg) {
  return *msg->_impl_.header_;
}
ObuBasicInfo::ObuBasicInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.obu.msg.ObuBasicInfo)
}
inline PROTOBUF_NDEBUG_INLINE ObuBasicInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ObuBasicInfo::ObuBasicInfo(
    ::google::protobuf::Arena* arena,
    const ObuBasicInfo& from)
    : ::google::protobuf::Message(arena) {
  ObuBasicInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::grpc::obu::msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latitude_),
           offsetof(Impl_, yaw_rad_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::yaw_rad_));

  // @@protoc_insertion_point(copy_constructor:grpc.obu.msg.ObuBasicInfo)
}
inline PROTOBUF_NDEBUG_INLINE ObuBasicInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ObuBasicInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, yaw_rad_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::yaw_rad_));
}
ObuBasicInfo::~ObuBasicInfo() {
  // @@protoc_insertion_point(destructor:grpc.obu.msg.ObuBasicInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ObuBasicInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ObuBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.obu.msg.ObuBasicInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_rad_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.yaw_rad_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ObuBasicInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 0, 2> ObuBasicInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965249,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ObuBasicInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .grpc.obu.msg.Header Header = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.header_)}},
    // float latitude = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.latitude_)}},
    // float longitude = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.longitude_)}},
    // float altitude = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.altitude_)}},
    // float gnss_heading = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.gnss_heading_)}},
    // float gnss_speed = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.gnss_speed_)}},
    // float vehicle_speed = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.vehicle_speed_)}},
    // float pitch_rad = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.pitch_rad_)}},
    // float roll_rad = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.roll_rad_)}},
    // float yaw_rad = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.yaw_rad_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .grpc.obu.msg.Header Header = 2;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float latitude = 3;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.latitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float longitude = 4;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.longitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float altitude = 5;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.altitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float gnss_heading = 6;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.gnss_heading_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float gnss_speed = 7;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.gnss_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float vehicle_speed = 8;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.vehicle_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_rad = 9;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.pitch_rad_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float roll_rad = 10;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.roll_rad_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_rad = 11;
    {PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.yaw_rad_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::grpc::obu::msg::Header>()},
  }}, {{
  }},
};

::uint8_t* ObuBasicInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.obu.msg.ObuBasicInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .grpc.obu.msg.Header Header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // float latitude = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  ::uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_latitude(), target);
  }

  // float longitude = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  ::uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_longitude(), target);
  }

  // float altitude = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  ::uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_altitude(), target);
  }

  // float gnss_heading = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gnss_heading = this->_internal_gnss_heading();
  ::uint32_t raw_gnss_heading;
  memcpy(&raw_gnss_heading, &tmp_gnss_heading, sizeof(tmp_gnss_heading));
  if (raw_gnss_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_gnss_heading(), target);
  }

  // float gnss_speed = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gnss_speed = this->_internal_gnss_speed();
  ::uint32_t raw_gnss_speed;
  memcpy(&raw_gnss_speed, &tmp_gnss_speed, sizeof(tmp_gnss_speed));
  if (raw_gnss_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_gnss_speed(), target);
  }

  // float vehicle_speed = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vehicle_speed = this->_internal_vehicle_speed();
  ::uint32_t raw_vehicle_speed;
  memcpy(&raw_vehicle_speed, &tmp_vehicle_speed, sizeof(tmp_vehicle_speed));
  if (raw_vehicle_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_vehicle_speed(), target);
  }

  // float pitch_rad = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad = this->_internal_pitch_rad();
  ::uint32_t raw_pitch_rad;
  memcpy(&raw_pitch_rad, &tmp_pitch_rad, sizeof(tmp_pitch_rad));
  if (raw_pitch_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_pitch_rad(), target);
  }

  // float roll_rad = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad = this->_internal_roll_rad();
  ::uint32_t raw_roll_rad;
  memcpy(&raw_roll_rad, &tmp_roll_rad, sizeof(tmp_roll_rad));
  if (raw_roll_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        10, this->_internal_roll_rad(), target);
  }

  // float yaw_rad = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad = this->_internal_yaw_rad();
  ::uint32_t raw_yaw_rad;
  memcpy(&raw_yaw_rad, &tmp_yaw_rad, sizeof(tmp_yaw_rad));
  if (raw_yaw_rad != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_yaw_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.obu.msg.ObuBasicInfo)
  return target;
}

::size_t ObuBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.obu.msg.ObuBasicInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.obu.msg.Header Header = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
  }

  // float latitude = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  ::uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 5;
  }

  // float longitude = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  ::uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 5;
  }

  // float altitude = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  ::uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 5;
  }

  // float gnss_heading = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gnss_heading = this->_internal_gnss_heading();
  ::uint32_t raw_gnss_heading;
  memcpy(&raw_gnss_heading, &tmp_gnss_heading, sizeof(tmp_gnss_heading));
  if (raw_gnss_heading != 0) {
    total_size += 5;
  }

  // float gnss_speed = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gnss_speed = this->_internal_gnss_speed();
  ::uint32_t raw_gnss_speed;
  memcpy(&raw_gnss_speed, &tmp_gnss_speed, sizeof(tmp_gnss_speed));
  if (raw_gnss_speed != 0) {
    total_size += 5;
  }

  // float vehicle_speed = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vehicle_speed = this->_internal_vehicle_speed();
  ::uint32_t raw_vehicle_speed;
  memcpy(&raw_vehicle_speed, &tmp_vehicle_speed, sizeof(tmp_vehicle_speed));
  if (raw_vehicle_speed != 0) {
    total_size += 5;
  }

  // float pitch_rad = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad = this->_internal_pitch_rad();
  ::uint32_t raw_pitch_rad;
  memcpy(&raw_pitch_rad, &tmp_pitch_rad, sizeof(tmp_pitch_rad));
  if (raw_pitch_rad != 0) {
    total_size += 5;
  }

  // float roll_rad = 10;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad = this->_internal_roll_rad();
  ::uint32_t raw_roll_rad;
  memcpy(&raw_roll_rad, &tmp_roll_rad, sizeof(tmp_roll_rad));
  if (raw_roll_rad != 0) {
    total_size += 5;
  }

  // float yaw_rad = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad = this->_internal_yaw_rad();
  ::uint32_t raw_yaw_rad;
  memcpy(&raw_yaw_rad, &tmp_yaw_rad, sizeof(tmp_yaw_rad));
  if (raw_yaw_rad != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ObuBasicInfo::_class_data_ = {
    ObuBasicInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ObuBasicInfo::GetClassData() const {
  return &_class_data_;
}

void ObuBasicInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ObuBasicInfo*>(&to_msg);
  auto& from = static_cast<const ObuBasicInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.obu.msg.ObuBasicInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::grpc::obu::msg::Header::MergeFrom(
        from._internal_header());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  ::uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  ::uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_altitude = from._internal_altitude();
  ::uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _this->_internal_set_altitude(from._internal_altitude());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gnss_heading = from._internal_gnss_heading();
  ::uint32_t raw_gnss_heading;
  memcpy(&raw_gnss_heading, &tmp_gnss_heading, sizeof(tmp_gnss_heading));
  if (raw_gnss_heading != 0) {
    _this->_internal_set_gnss_heading(from._internal_gnss_heading());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gnss_speed = from._internal_gnss_speed();
  ::uint32_t raw_gnss_speed;
  memcpy(&raw_gnss_speed, &tmp_gnss_speed, sizeof(tmp_gnss_speed));
  if (raw_gnss_speed != 0) {
    _this->_internal_set_gnss_speed(from._internal_gnss_speed());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_vehicle_speed = from._internal_vehicle_speed();
  ::uint32_t raw_vehicle_speed;
  memcpy(&raw_vehicle_speed, &tmp_vehicle_speed, sizeof(tmp_vehicle_speed));
  if (raw_vehicle_speed != 0) {
    _this->_internal_set_vehicle_speed(from._internal_vehicle_speed());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch_rad = from._internal_pitch_rad();
  ::uint32_t raw_pitch_rad;
  memcpy(&raw_pitch_rad, &tmp_pitch_rad, sizeof(tmp_pitch_rad));
  if (raw_pitch_rad != 0) {
    _this->_internal_set_pitch_rad(from._internal_pitch_rad());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll_rad = from._internal_roll_rad();
  ::uint32_t raw_roll_rad;
  memcpy(&raw_roll_rad, &tmp_roll_rad, sizeof(tmp_roll_rad));
  if (raw_roll_rad != 0) {
    _this->_internal_set_roll_rad(from._internal_roll_rad());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw_rad = from._internal_yaw_rad();
  ::uint32_t raw_yaw_rad;
  memcpy(&raw_yaw_rad, &tmp_yaw_rad, sizeof(tmp_yaw_rad));
  if (raw_yaw_rad != 0) {
    _this->_internal_set_yaw_rad(from._internal_yaw_rad());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ObuBasicInfo::CopyFrom(const ObuBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.obu.msg.ObuBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ObuBasicInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ObuBasicInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ObuBasicInfo::InternalSwap(ObuBasicInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.yaw_rad_)
      + sizeof(ObuBasicInfo::_impl_.yaw_rad_)
      - PROTOBUF_FIELD_OFFSET(ObuBasicInfo, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata ObuBasicInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obu_5fmessage_2eproto_getter, &descriptor_table_obu_5fmessage_2eproto_once,
      file_level_metadata_obu_5fmessage_2eproto[3]);
}
// ===================================================================

class TrafficLight::_Internal {
 public:
};

TrafficLight::TrafficLight(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.obu.msg.TrafficLight)
}
TrafficLight::TrafficLight(
    ::google::protobuf::Arena* arena, const TrafficLight& from)
    : TrafficLight(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TrafficLight::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrafficLight::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, state_),
           0,
           offsetof(Impl_, remaining_time_) -
               offsetof(Impl_, state_) +
               sizeof(Impl_::remaining_time_));
}
TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:grpc.obu.msg.TrafficLight)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrafficLight::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.obu.msg.TrafficLight)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.remaining_time_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.remaining_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TrafficLight::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TrafficLight_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .grpc.obu.msg.TrafficLight.TrafficLightState state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrafficLight, _impl_.state_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.state_)}},
    // float remaining_time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.remaining_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .grpc.obu.msg.TrafficLight.TrafficLightState state = 2;
    {PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // float remaining_time = 3;
    {PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.remaining_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TrafficLight::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.obu.msg.TrafficLight)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .grpc.obu.msg.TrafficLight.TrafficLightState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_state(), target);
  }

  // float remaining_time = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining_time = this->_internal_remaining_time();
  ::uint32_t raw_remaining_time;
  memcpy(&raw_remaining_time, &tmp_remaining_time, sizeof(tmp_remaining_time));
  if (raw_remaining_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_remaining_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.obu.msg.TrafficLight)
  return target;
}

::size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.obu.msg.TrafficLight)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.obu.msg.TrafficLight.TrafficLightState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // float remaining_time = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining_time = this->_internal_remaining_time();
  ::uint32_t raw_remaining_time;
  memcpy(&raw_remaining_time, &tmp_remaining_time, sizeof(tmp_remaining_time));
  if (raw_remaining_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TrafficLight::_class_data_ = {
    TrafficLight::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TrafficLight::GetClassData() const {
  return &_class_data_;
}

void TrafficLight::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TrafficLight*>(&to_msg);
  auto& from = static_cast<const TrafficLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.obu.msg.TrafficLight)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_remaining_time = from._internal_remaining_time();
  ::uint32_t raw_remaining_time;
  memcpy(&raw_remaining_time, &tmp_remaining_time, sizeof(tmp_remaining_time));
  if (raw_remaining_time != 0) {
    _this->_internal_set_remaining_time(from._internal_remaining_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.obu.msg.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrafficLight::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrafficLight::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrafficLight::InternalSwap(TrafficLight* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.remaining_time_)
      + sizeof(TrafficLight::_impl_.remaining_time_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obu_5fmessage_2eproto_getter, &descriptor_table_obu_5fmessage_2eproto_once,
      file_level_metadata_obu_5fmessage_2eproto[4]);
}
// ===================================================================

class ObuTrafficLightInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ObuTrafficLightInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_._has_bits_);
  static const ::grpc::obu::msg::Header& header(const ObuTrafficLightInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::grpc::obu::msg::TrafficLight& turn_left(const ObuTrafficLightInfo* msg);
  static void set_has_turn_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::grpc::obu::msg::TrafficLight& straight_ahead(const ObuTrafficLightInfo* msg);
  static void set_has_straight_ahead(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::grpc::obu::msg::TrafficLight& turn_right(const ObuTrafficLightInfo* msg);
  static void set_has_turn_right(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::grpc::obu::msg::Header& ObuTrafficLightInfo::_Internal::header(const ObuTrafficLightInfo* msg) {
  return *msg->_impl_.header_;
}
const ::grpc::obu::msg::TrafficLight& ObuTrafficLightInfo::_Internal::turn_left(const ObuTrafficLightInfo* msg) {
  return *msg->_impl_.turn_left_;
}
const ::grpc::obu::msg::TrafficLight& ObuTrafficLightInfo::_Internal::straight_ahead(const ObuTrafficLightInfo* msg) {
  return *msg->_impl_.straight_ahead_;
}
const ::grpc::obu::msg::TrafficLight& ObuTrafficLightInfo::_Internal::turn_right(const ObuTrafficLightInfo* msg) {
  return *msg->_impl_.turn_right_;
}
ObuTrafficLightInfo::ObuTrafficLightInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.obu.msg.ObuTrafficLightInfo)
}
inline PROTOBUF_NDEBUG_INLINE ObuTrafficLightInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ObuTrafficLightInfo::ObuTrafficLightInfo(
    ::google::protobuf::Arena* arena,
    const ObuTrafficLightInfo& from)
    : ::google::protobuf::Message(arena) {
  ObuTrafficLightInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.header_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::grpc::obu::msg::Header>(arena, *from._impl_.header_)
                : nullptr;
  _impl_.turn_left_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::grpc::obu::msg::TrafficLight>(arena, *from._impl_.turn_left_)
                : nullptr;
  _impl_.straight_ahead_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::grpc::obu::msg::TrafficLight>(arena, *from._impl_.straight_ahead_)
                : nullptr;
  _impl_.turn_right_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::grpc::obu::msg::TrafficLight>(arena, *from._impl_.turn_right_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:grpc.obu.msg.ObuTrafficLightInfo)
}
inline PROTOBUF_NDEBUG_INLINE ObuTrafficLightInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ObuTrafficLightInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, header_),
           0,
           offsetof(Impl_, turn_right_) -
               offsetof(Impl_, header_) +
               sizeof(Impl_::turn_right_));
}
ObuTrafficLightInfo::~ObuTrafficLightInfo() {
  // @@protoc_insertion_point(destructor:grpc.obu.msg.ObuTrafficLightInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ObuTrafficLightInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.header_;
  delete _impl_.turn_left_;
  delete _impl_.straight_ahead_;
  delete _impl_.turn_right_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ObuTrafficLightInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.obu.msg.ObuTrafficLightInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.turn_left_ != nullptr);
      _impl_.turn_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.straight_ahead_ != nullptr);
      _impl_.straight_ahead_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.turn_right_ != nullptr);
      _impl_.turn_right_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ObuTrafficLightInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> ObuTrafficLightInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ObuTrafficLightInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .grpc.obu.msg.TrafficLight turn_right = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.turn_right_)}},
    // .grpc.obu.msg.Header Header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.header_)}},
    // .grpc.obu.msg.TrafficLight turn_left = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.turn_left_)}},
    // .grpc.obu.msg.TrafficLight straight_ahead = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.straight_ahead_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .grpc.obu.msg.Header Header = 1;
    {PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .grpc.obu.msg.TrafficLight turn_left = 2;
    {PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.turn_left_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .grpc.obu.msg.TrafficLight straight_ahead = 3;
    {PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.straight_ahead_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .grpc.obu.msg.TrafficLight turn_right = 4;
    {PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.turn_right_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::grpc::obu::msg::Header>()},
    {::_pbi::TcParser::GetTable<::grpc::obu::msg::TrafficLight>()},
    {::_pbi::TcParser::GetTable<::grpc::obu::msg::TrafficLight>()},
    {::_pbi::TcParser::GetTable<::grpc::obu::msg::TrafficLight>()},
  }}, {{
  }},
};

::uint8_t* ObuTrafficLightInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.obu.msg.ObuTrafficLightInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .grpc.obu.msg.Header Header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .grpc.obu.msg.TrafficLight turn_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::turn_left(this),
        _Internal::turn_left(this).GetCachedSize(), target, stream);
  }

  // .grpc.obu.msg.TrafficLight straight_ahead = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::straight_ahead(this),
        _Internal::straight_ahead(this).GetCachedSize(), target, stream);
  }

  // .grpc.obu.msg.TrafficLight turn_right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::turn_right(this),
        _Internal::turn_right(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.obu.msg.ObuTrafficLightInfo)
  return target;
}

::size_t ObuTrafficLightInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.obu.msg.ObuTrafficLightInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .grpc.obu.msg.Header Header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.header_);
    }

    // .grpc.obu.msg.TrafficLight turn_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.turn_left_);
    }

    // .grpc.obu.msg.TrafficLight straight_ahead = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.straight_ahead_);
    }

    // .grpc.obu.msg.TrafficLight turn_right = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.turn_right_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ObuTrafficLightInfo::_class_data_ = {
    ObuTrafficLightInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ObuTrafficLightInfo::GetClassData() const {
  return &_class_data_;
}

void ObuTrafficLightInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ObuTrafficLightInfo*>(&to_msg);
  auto& from = static_cast<const ObuTrafficLightInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpc.obu.msg.ObuTrafficLightInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::grpc::obu::msg::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_turn_left()->::grpc::obu::msg::TrafficLight::MergeFrom(
          from._internal_turn_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_straight_ahead()->::grpc::obu::msg::TrafficLight::MergeFrom(
          from._internal_straight_ahead());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_turn_right()->::grpc::obu::msg::TrafficLight::MergeFrom(
          from._internal_turn_right());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ObuTrafficLightInfo::CopyFrom(const ObuTrafficLightInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.obu.msg.ObuTrafficLightInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ObuTrafficLightInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ObuTrafficLightInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ObuTrafficLightInfo::InternalSwap(ObuTrafficLightInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.turn_right_)
      + sizeof(ObuTrafficLightInfo::_impl_.turn_right_)
      - PROTOBUF_FIELD_OFFSET(ObuTrafficLightInfo, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::google::protobuf::Metadata ObuTrafficLightInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_obu_5fmessage_2eproto_getter, &descriptor_table_obu_5fmessage_2eproto_once,
      file_level_metadata_obu_5fmessage_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
}  // namespace obu
}  // namespace grpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
